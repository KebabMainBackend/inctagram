generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id          Int        @id @default(autoincrement())
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @map("updated_at")
  userId      Int        @map("user_id")
  status      PostStatus @default(ACTIVE)
  images      String[]
  user        User       @relation(fields: [userId], references: [id])
}

model User {
  id               Int               @id @unique @default(autoincrement())
  email            String            @unique
  username         String            @unique
  passwordHash     String?
  passwordSalt     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isConfirmed      Boolean           @default(false)
  isDeleted        Boolean           @default(false)
  providerId       String?
  providers        OAuthProvider[]
  posts            Post[]
  profile          Profile?
  sessions         Session[]
  confirmationData UserConfirmation?
}

model Profile {
  userId      Int      @id @unique
  firstname   String?
  lastname    String?
  birthDate   String?
  aboutMe     String?
  avatarId    String?
  thumbnailId String?
  city        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  accountType String?
  user        User     @relation(fields: [userId], references: [id])
  subscription Subscription?
  payments Payments[]
}

model UserConfirmation {
  id                 Int      @id @unique @default(autoincrement())
  confirmationCode   String
  codeExpirationDate DateTime
  userId             Int      @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  User               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @unique @default(uuid())
  userId         Int
  lastActiveDate DateTime
  aliveTill      DateTime
  deviceId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  device         Devices  @relation(fields: [deviceId], references: [deviceId])
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Devices {
  title     String
  ip        String
  deviceId  String    @id @unique
  sessionId String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  session   Session[]
}

model OAuthProvider {
  id           Int      @id @unique @default(autoincrement())
  providerId   String
  providerType String
  email        String?
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Blacklist {
  refreshToken String @unique
}

model Subscription {
  userId            Int      @unique
  profile           Profile  @relation(fields: [userId], references: [userId])
  subscriptionType  String
  dateOfSubscribe   DateTime @default(now())
  dateOfNextPayment DateTime
  autoRenewal       Boolean  @default(false)
  paymentMethod     String
}

model Payments {
  userId            Int      @unique
  profile           Profile  @relation(fields: [userId], references: [userId])
  dateOfPayments        DateTime @default(now())
  endDateOfSubscription DateTime
  price                 Int
  paymentType           String
}

enum PostStatus {
  ACTIVE
  DELETED
  BLOCKED
}
