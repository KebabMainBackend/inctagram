generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id          Int        @id @default(autoincrement())
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @map("updated_at")
  userId      Int        @map("user_id")
  status      PostStatus @default(ACTIVE)
  images      String[]
  user        User       @relation(fields: [userId], references: [id])
}

model User {
  id               Int               @id @unique @default(autoincrement())
  email            String            @unique
  username         String            @unique
  passwordHash     String?
  passwordSalt     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isConfirmed      Boolean           @default(false)
  isDeleted        Boolean           @default(false)
  providerId       String?
  providers        OAuthProvider[]
  posts            Post[]
  profile          Profile?
  sessions         Session[]
  confirmationData UserConfirmation?
}

model Profile {
  userId              Int                  @id @unique
  firstname           String?
  lastname            String?
  birthDate           String?
  aboutMe             String?
  avatarId            String?
  thumbnailId         String?
  city                String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  accountType         AccountType          @default(PERSONAL)
  CurrentSubscription CurrentSubscription?
  payments            Payments[]
  user                User                 @relation(fields: [userId], references: [id])
  subscription        Subscription[]
}

model UserConfirmation {
  id                 Int      @id @unique @default(autoincrement())
  confirmationCode   String
  codeExpirationDate DateTime
  userId             Int      @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  User               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @unique @default(uuid())
  userId         Int
  lastActiveDate DateTime
  aliveTill      DateTime
  devicesId      String   @map("deviceId")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  device         Devices?
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Devices {
  title     String
  ip        String
  id        String   @id @unique @map("deviceId")
  sessionId String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  session   Session? @relation(fields: [sessionId], references: [id])
}

model OAuthProvider {
  id           Int      @id @unique @default(autoincrement())
  providerId   String
  providerType String
  email        String?
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Blacklist {
  refreshToken String @unique
}

model Subscription {
  userId               Int
  dateOfSubscribe      DateTime            @default(now())
  dateOfNextPayment    DateTime
  autoRenewal          Boolean             @default(false)
  interval             PaymentInterval
  paymentSystem        AllowedPaymentTypes @default(Paypal)
  period               Int
  subscriptionId       Int                 @id @unique @default(autoincrement())
  stripeSubscriptionId String?
  productPriceId       String?
  subscriptionPriceId  String?
  paypalSubscriptionId String?
  profile              Profile             @relation(fields: [profileUserId], references: [userId])
  profileUserId        Int
}

model Payments {
  userId                Int
  endDateOfSubscription DateTime
  price                 Int
  paymentId             Int                 @id @unique @default(autoincrement())
  dateOfPayment         DateTime            @default(now())
  paymentSystem         AllowedPaymentTypes @default(Paypal)
  productPriceId        String?
  subscriptionPriceId   String?
  paypalSubscriptionId  String?
  interval              PaymentInterval?
  profile               Profile             @relation(fields: [userId], references: [userId])
}

model Product {
  id                  Int              @id @unique @default(autoincrement())
  period              Int
  price               Int
  interval            PaymentInterval?
  productPriceId      String?
  subscriptionPriceId String?
  paypalPlanId        String?
}

model CurrentSubscription {
  userId            Int      @id @unique
  expireAt          DateTime
  dateOfNextPayment DateTime
  hasAutoRenewal    Boolean  @default(false)
  paypalCustomerId  String?
  stripeCustomerId  String?
  profile           Profile  @relation(fields: [userId], references: [userId])
}

enum PostStatus {
  ACTIVE
  DELETED
  BLOCKED
}

enum AccountType {
  BUSINESS
  PERSONAL
}

enum AllowedPaymentTypes {
  Paypal
  Stripe
}

enum PaymentInterval {
  day
  week
  month
  year
}
