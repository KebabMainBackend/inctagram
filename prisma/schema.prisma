generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean? @default(false)
  authorId  Int?
}

model User {
  id               Int               @id @unique @default(autoincrement())
  email            String            @unique
  username         String            @unique
  passwordHash     String?
  passwordSalt     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isConfirmed      Boolean           @default(false)
  isDeleted        Boolean           @default(false)
  confirmationData UserConfirmation?
  providers        OAuthProvider[]
  providerId       String?
  sessions         Session[]
  profile          Profile[]
}

model Profile {
  userId    Int      @id @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  firstname String?
  lastname  String?
  birthDate String?
  aboutMe   String?
  avatarUrl String?
  city      String?
  avatar    Avatar?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Avatar {
  url           String   @unique
  width         Int
  height        Int
  fileSize      Int
  profile       Profile  @relation(fields: [profileUserId], references: [userId], onDelete: Cascade)
  profileUserId Int      @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UserConfirmation {
  id                 Int      @id @unique @default(autoincrement())
  confirmationCode   String
  codeExpirationDate DateTime
  userId             Int      @unique
  User               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Session {
  id             Int       @id @unique @default(autoincrement())
  userId         Int
  User           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastActiveDate DateTime
  aliveTill      DateTime
  devices        Devices[]
  deviceId       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Devices {
  title     String
  ip        String
  deviceId  String   @id @unique
  session   Session? @relation(fields: [sessionId], references: [id])
  sessionId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OAuthProvider {
  id           Int      @id @unique @default(autoincrement())
  providerId   String
  providerType String
  email        String?
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Blacklist {
  refreshToken String @unique
}
